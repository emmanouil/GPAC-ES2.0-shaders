<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  


  <head>
    <title>
      ES2[YUVstrictFULL].frag on ES2shaders – Attachment
     – gpac
    </title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <!--[if IE]><script type="text/javascript">
      if (/^#__msie303:/.test(window.location.hash))
        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));
    </script><![endif]-->
        <link rel="search" href="/trac/project/gpac/search" />
        <link rel="help" href="/trac/project/gpac/wiki/TracGuide" />
        <link rel="alternate" href="/trac/project/gpac/raw-attachment/wiki/ES2shaders/ES2%5BYUVstrictFULL%5D.frag" title="Original format" />
        <link rel="up" href="/trac/project/gpac/wiki/ES2shaders" title="ES2shaders" />
        <link rel="start" href="/trac/project/gpac/wiki" />
        <link rel="stylesheet" href="/trac/project/gpac/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/trac/project/gpac/pygments/trac.css" type="text/css" /><link rel="stylesheet" href="/trac/project/gpac/chrome/common/css/code.css" type="text/css" /><link rel="stylesheet" href="/trac/project/gpac/chrome/listofwikipages/style.css" type="text/css" />
        <link rel="shortcut icon" href="/trac-htdocs/project/gpac/favicon.ico" type="image/x-icon" />
        <link rel="icon" href="/trac-htdocs/project/gpac/favicon.ico" type="image/x-icon" />
      <link type="application/opensearchdescription+xml" rel="search" href="/trac/project/gpac/search/opensearch" title="Search gpac" />
    <script type="text/javascript" src="/trac/project/gpac/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/trac/project/gpac/chrome/common/js/babel.js"></script><script type="text/javascript" src="/trac/project/gpac/chrome/common/js/messages/en_GB.js"></script><script type="text/javascript" src="/trac/project/gpac/chrome/common/js/trac.js"></script><script type="text/javascript" src="/trac/project/gpac/chrome/common/js/search.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/trac/project/gpac/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
      <script type="text/javascript" src="/trac/project/gpac/chrome/common/js/folding.js"></script>
      <script type="text/javascript">
        jQuery(document).ready(function($) {
          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));
        });
      </script>
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="http://www.telecom-paristech.fr"><img src="/trac-htdocs/project/gpac/trac_header_logo.png" alt="Telecom ParisTech" /></a>
      </div>
      <form id="search" action="/trac/project/gpac/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="" />
          <input type="submit" value="Search" />
        </div>
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first">logged in as potetsia</li><li><a href="/trac/project/gpac/logout">Logout</a></li><li><a href="/trac/project/gpac/prefs">Preferences</a></li><li><a href="/trac/project/gpac/wiki/TracGuide">Help/Guide</a></li><li class="last"><a href="/trac/project/gpac/about">About Trac</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="/trac/project/gpac/blog">Blog</a></li><li class="active"><a href="/trac/project/gpac/wiki">Wiki</a></li><li><a href="/trac/project/gpac/discussion">Discussion</a></li><li><a href="/trac/project/gpac/browser">Browse source</a></li><li><a href="/trac/project/gpac/report">View tickets</a></li><li><a href="/trac/project/gpac/newticket">New ticket</a></li><li><a href="/trac/project/gpac/timeline">Timeline</a></li><li><a href="/trac/project/gpac/search">Search</a></li><li class="last"><a href="/trac/project/gpac/admin" title="Administration">Admin</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context navigation</h2>
          <ul>
              <li class="last first"><a href="/trac/project/gpac/wiki/ES2shaders">Back to ES2shaders</a></li>
          </ul>
        <hr />
      </div>
    <div id="content" class="attachment">
        <h1><a href="/trac/project/gpac/wiki/ES2shaders">ES2shaders</a>: ES2[YUVstrictFULL].frag</h1>
        <table id="info" summary="Description">
          <tbody>
            <tr>
              <th scope="col">File ES2[YUVstrictFULL].frag,
                <span title="5945 bytes">5.8 KB</span>
                (added by potetsia, <a class="timeline" href="/trac/project/gpac/timeline?from=2015-01-30T15%3A33%3A17%2B01%3A00&amp;precision=second" title="2015-01-30T15:33:17+01:00 in Timeline">3 hours</a> ago)</th>
            </tr>
            <tr>
              <td class="message searchable">
                <p>
+ mat2d
</p>

              </td>
            </tr>
          </tbody>
        </table>
        <div id="preview" class="searchable">
          
  <table class="code"><thead><tr><th class="lineno" title="Line numbers">Line</th><th class="content"> </th></tr></thead><tbody><tr><th id="L1"><a href="#L1">1</a></th><td>/**</td></tr><tr><th id="L2"><a href="#L2">2</a></th><td> * Shader implementing: Clipping, Texturing, Lighting</td></tr><tr><th id="L3"><a href="#L3">3</a></th><td> * does NOT implement: Fog, mat2d colour</td></tr><tr><th id="L4"><a href="#L4">4</a></th><td> * TODO:        background</td></tr><tr><th id="L5"><a href="#L5">5</a></th><td> *                      material with/without lighting</td></tr><tr><th id="L6"><a href="#L6">6</a></th><td> * Introduced: hasLights</td></tr><tr><th id="L7"><a href="#L7">7</a></th><td> *</td></tr><tr><th id="L8"><a href="#L8">8</a></th><td> **/</td></tr><tr><th id="L9"><a href="#L9">9</a></th><td> </td></tr><tr><th id="L10"><a href="#L10">10</a></th><td>#pragma STDGL invariant(all)    //delete after testing</td></tr><tr><th id="L11"><a href="#L11">11</a></th><td></td></tr><tr><th id="L12"><a href="#L12">12</a></th><td>#extension GL_ARB_texture_rectangle : enable</td></tr><tr><th id="L13"><a href="#L13">13</a></th><td></td></tr><tr><th id="L14"><a href="#L14">14</a></th><td>#define FOG_TYPE_LINEAR 0</td></tr><tr><th id="L15"><a href="#L15">15</a></th><td>#define FOG_TYPE_EXP    1</td></tr><tr><th id="L16"><a href="#L16">16</a></th><td>#define FOG_TYPE_EXP2   2</td></tr><tr><th id="L17"><a href="#L17">17</a></th><td></td></tr><tr><th id="L18"><a href="#L18">18</a></th><td>#define L_DIRECTIONAL   0</td></tr><tr><th id="L19"><a href="#L19">19</a></th><td>#define L_SPOT              1</td></tr><tr><th id="L20"><a href="#L20">20</a></th><td>#define L_POINT                 2</td></tr><tr><th id="L21"><a href="#L21">21</a></th><td></td></tr><tr><th id="L22"><a href="#L22">22</a></th><td>#define LIGHTS_MAX              8</td></tr><tr><th id="L23"><a href="#L23">23</a></th><td>#define TEXTURES_MAX    2</td></tr><tr><th id="L24"><a href="#L24">24</a></th><td></td></tr><tr><th id="L25"><a href="#L25">25</a></th><td>#define CLIPS_MAX               8</td></tr><tr><th id="L26"><a href="#L26">26</a></th><td></td></tr><tr><th id="L27"><a href="#L27">27</a></th><td></td></tr><tr><th id="L28"><a href="#L28">28</a></th><td>struct gfLight{</td></tr><tr><th id="L29"><a href="#L29">29</a></th><td>        int type;</td></tr><tr><th id="L30"><a href="#L30">30</a></th><td>        vec4 position;</td></tr><tr><th id="L31"><a href="#L31">31</a></th><td>        vec4 direction;</td></tr><tr><th id="L32"><a href="#L32">32</a></th><td>        vec3 attenuation;</td></tr><tr><th id="L33"><a href="#L33">33</a></th><td>        vec4 color;</td></tr><tr><th id="L34"><a href="#L34">34</a></th><td>        float ambientIntensity;</td></tr><tr><th id="L35"><a href="#L35">35</a></th><td>        float intensity;</td></tr><tr><th id="L36"><a href="#L36">36</a></th><td>        float beamWidth;</td></tr><tr><th id="L37"><a href="#L37">37</a></th><td>        float cutOffAngle;</td></tr><tr><th id="L38"><a href="#L38">38</a></th><td>};</td></tr><tr><th id="L39"><a href="#L39">39</a></th><td>        uniform bool gfFogEnabled; </td></tr><tr><th id="L40"><a href="#L40">40</a></th><td>        uniform vec3 gfFogColor;</td></tr><tr><th id="L41"><a href="#L41">41</a></th><td></td></tr><tr><th id="L42"><a href="#L42">42</a></th><td>uniform vec4 gfAmbientColor;</td></tr><tr><th id="L43"><a href="#L43">43</a></th><td>uniform vec4 gfDiffuseColor; </td></tr><tr><th id="L44"><a href="#L44">44</a></th><td>uniform vec4 gfSpecularColor; </td></tr><tr><th id="L45"><a href="#L45">45</a></th><td>uniform vec4 gfEmissionColor;</td></tr><tr><th id="L46"><a href="#L46">46</a></th><td>uniform float gfShininess; </td></tr><tr><th id="L47"><a href="#L47">47</a></th><td>uniform int gfNumLights;</td></tr><tr><th id="L48"><a href="#L48">48</a></th><td>uniform int isYUV;</td></tr><tr><th id="L49"><a href="#L49">49</a></th><td>uniform vec4 gfLightPosition; </td></tr><tr><th id="L50"><a href="#L50">50</a></th><td>uniform vec4 gfLightDiffuse;</td></tr><tr><th id="L51"><a href="#L51">51</a></th><td>uniform vec4 gfLightAmbient; </td></tr><tr><th id="L52"><a href="#L52">52</a></th><td>uniform vec4 gfLightSpecular;</td></tr><tr><th id="L53"><a href="#L53">53</a></th><td>uniform int gfNumTextures;</td></tr><tr><th id="L54"><a href="#L54">54</a></th><td>uniform gfLight lights[LIGHTS_MAX];</td></tr><tr><th id="L55"><a href="#L55">55</a></th><td>uniform bool hasClip;</td></tr><tr><th id="L56"><a href="#L56">56</a></th><td>uniform bool hasMeshColor;</td></tr><tr><th id="L57"><a href="#L57">57</a></th><td>uniform bool enableLights;</td></tr><tr><th id="L58"><a href="#L58">58</a></th><td></td></tr><tr><th id="L59"><a href="#L59">59</a></th><td>//test</td></tr><tr><th id="L60"><a href="#L60">60</a></th><td>uniform sampler2DRect y_plane;</td></tr><tr><th id="L61"><a href="#L61">61</a></th><td>uniform sampler2DRect u_plane;</td></tr><tr><th id="L62"><a href="#L62">62</a></th><td>uniform sampler2DRect v_plane;</td></tr><tr><th id="L63"><a href="#L63">63</a></th><td>uniform float width;</td></tr><tr><th id="L64"><a href="#L64">64</a></th><td>uniform float height;</td></tr><tr><th id="L65"><a href="#L65">65</a></th><td>uniform float alpha;</td></tr><tr><th id="L66"><a href="#L66">66</a></th><td>//const float width=128.0;</td></tr><tr><th id="L67"><a href="#L67">67</a></th><td>//const float height=128.0;</td></tr><tr><th id="L68"><a href="#L68">68</a></th><td>//const float alpha=1.0;</td></tr><tr><th id="L69"><a href="#L69">69</a></th><td>const vec3 offset = vec3(-0.0625, -0.5, -0.5);</td></tr><tr><th id="L70"><a href="#L70">70</a></th><td>const vec3 R_mul = vec3(1.164,  0.000,  1.596);</td></tr><tr><th id="L71"><a href="#L71">71</a></th><td>const vec3 G_mul = vec3(1.164, -0.391, -0.813);</td></tr><tr><th id="L72"><a href="#L72">72</a></th><td>const vec3 B_mul = vec3(1.164,  2.018,  0.000);</td></tr><tr><th id="L73"><a href="#L73">73</a></th><td></td></tr><tr><th id="L74"><a href="#L74">74</a></th><td>varying vec3 n;</td></tr><tr><th id="L75"><a href="#L75">75</a></th><td>varying vec4 gfEye;</td></tr><tr><th id="L76"><a href="#L76">76</a></th><td>//varying vec3 lightVector;</td></tr><tr><th id="L77"><a href="#L77">77</a></th><td>//varying vec3 halfVector;</td></tr><tr><th id="L78"><a href="#L78">78</a></th><td>varying vec2 TexCoord;</td></tr><tr><th id="L79"><a href="#L79">79</a></th><td>varying vec3 lightVector[8];</td></tr><tr><th id="L80"><a href="#L80">80</a></th><td>varying vec3 halfVector[8];</td></tr><tr><th id="L81"><a href="#L81">81</a></th><td>varying float clipDistance[CLIPS_MAX];</td></tr><tr><th id="L82"><a href="#L82">82</a></th><td>varying float gfFogFactor;</td></tr><tr><th id="L83"><a href="#L83">83</a></th><td></td></tr><tr><th id="L84"><a href="#L84">84</a></th><td>//testing material</td></tr><tr><th id="L85"><a href="#L85">85</a></th><td>varying vec4 m_ambientC;</td></tr><tr><th id="L86"><a href="#L86">86</a></th><td>varying vec4 m_diffuseC;</td></tr><tr><th id="L87"><a href="#L87">87</a></th><td>varying vec4 m_specularC;</td></tr><tr><th id="L88"><a href="#L88">88</a></th><td>varying vec4 m_emissionC;</td></tr><tr><th id="L89"><a href="#L89">89</a></th><td>varying float m_shininess;      //a.ka. specular exponent</td></tr><tr><th id="L90"><a href="#L90">90</a></th><td>varying vec4 m_color;</td></tr><tr><th id="L91"><a href="#L91">91</a></th><td></td></tr><tr><th id="L92"><a href="#L92">92</a></th><td>const float zero_float = 0.0;</td></tr><tr><th id="L93"><a href="#L93">93</a></th><td>const float one_float = 1.0;</td></tr><tr><th id="L94"><a href="#L94">94</a></th><td></td></tr><tr><th id="L95"><a href="#L95">95</a></th><td></td></tr><tr><th id="L96"><a href="#L96">96</a></th><td>vec4 doLighting(int i){</td></tr><tr><th id="L97"><a href="#L97">97</a></th><td></td></tr><tr><th id="L98"><a href="#L98">98</a></th><td>        vec4 lightColor = vec4(zero_float, zero_float, zero_float, zero_float);</td></tr><tr><th id="L99"><a href="#L99">99</a></th><td>        float att = zero_float;</td></tr><tr><th id="L100"><a href="#L100">100</a></th><td>        vec3 lightVnorm = normalize(lightVector[i]);</td></tr><tr><th id="L101"><a href="#L101">101</a></th><td>        vec3 normal = normalize(n);</td></tr><tr><th id="L102"><a href="#L102">102</a></th><td>        float light_cos = max(zero_float, dot(normal, lightVnorm));     //ndotl</td></tr><tr><th id="L103"><a href="#L103">103</a></th><td>        float half_cos = dot(normal, normalize(halfVector[i]));</td></tr><tr><th id="L104"><a href="#L104">104</a></th><td></td></tr><tr><th id="L105"><a href="#L105">105</a></th><td>        if(lights[i].type == 2){        //we have a point</td></tr><tr><th id="L106"><a href="#L106">106</a></th><td>                //vec3 lightDirection = vec3(lights[i].position-gfEye);</td></tr><tr><th id="L107"><a href="#L107">107</a></th><td>                float distance = length(lightVector[i]);        </td></tr><tr><th id="L108"><a href="#L108">108</a></th><td>                att = 1.0 / (lights[i].attenuation.x + lights[i].attenuation.y * distance + lights[i].attenuation.z * distance * distance);</td></tr><tr><th id="L109"><a href="#L109">109</a></th><td></td></tr><tr><th id="L110"><a href="#L110">110</a></th><td>                if (att &lt;= 0.0)</td></tr><tr><th id="L111"><a href="#L111">111</a></th><td>                        return lightColor;</td></tr><tr><th id="L112"><a href="#L112">112</a></th><td>                        </td></tr><tr><th id="L113"><a href="#L113">113</a></th><td>                lightColor += light_cos * lights[i].color * gfDiffuseColor;</td></tr><tr><th id="L114"><a href="#L114">114</a></th><td>                </td></tr><tr><th id="L115"><a href="#L115">115</a></th><td>                //startof method 1</td></tr><tr><th id="L116"><a href="#L116">116</a></th><td>                if(light_cos &gt; 0.0){</td></tr><tr><th id="L117"><a href="#L117">117</a></th><td>                        float dotNormHalf = max(dot(normal, normalize(halfVector[i])),0.0);     //ndoth</td></tr><tr><th id="L118"><a href="#L118">118</a></th><td>                        lightColor += (pow(dotNormHalf, gfShininess) * gfSpecularColor * lights[i].color);</td></tr><tr><th id="L119"><a href="#L119">119</a></th><td>                        lightColor *= att;</td></tr><tr><th id="L120"><a href="#L120">120</a></th><td>                }</td></tr><tr><th id="L121"><a href="#L121">121</a></th><td>                lightColor.a = gfDiffuseColor.a;</td></tr><tr><th id="L122"><a href="#L122">122</a></th><td>                return lightColor;</td></tr><tr><th id="L123"><a href="#L123">123</a></th><td>                </td></tr><tr><th id="L124"><a href="#L124">124</a></th><td>                </td></tr><tr><th id="L125"><a href="#L125">125</a></th><td>                </td></tr><tr><th id="L126"><a href="#L126">126</a></th><td>        } else if(lights[i].type == 1){ //we have a point</td></tr><tr><th id="L127"><a href="#L127">127</a></th><td>                if(light_cos &gt; 0.0){</td></tr><tr><th id="L128"><a href="#L128">128</a></th><td>                        float spot = dot(normalize(lights[i].direction.xyz), normalize(lightVector[i]));        //it should be -direction, but we invert it before parsing</td></tr><tr><th id="L129"><a href="#L129">129</a></th><td>                        if (spot &gt; lights[i].cutOffAngle){</td></tr><tr><th id="L130"><a href="#L130">130</a></th><td>                                float distance = length(lightVector[i]);        </td></tr><tr><th id="L131"><a href="#L131">131</a></th><td>                                float dotNormHalf = max(dot(normal, normalize(halfVector[i])),0.0);     //ndoth</td></tr><tr><th id="L132"><a href="#L132">132</a></th><td>                                spot = pow(spot, lights[i].intensity);</td></tr><tr><th id="L133"><a href="#L133">133</a></th><td>                                att = spot / (lights[i].attenuation.x + lights[i].attenuation.y * distance + lights[i].attenuation.z * distance * distance);</td></tr><tr><th id="L134"><a href="#L134">134</a></th><td>                                lightColor += att * (light_cos * lights[i].color * gfDiffuseColor);</td></tr><tr><th id="L135"><a href="#L135">135</a></th><td>                                lightColor += att * (pow(dotNormHalf, gfShininess) * gfSpecularColor * lights[i].color);</td></tr><tr><th id="L136"><a href="#L136">136</a></th><td>                        }</td></tr><tr><th id="L137"><a href="#L137">137</a></th><td>                }</td></tr><tr><th id="L138"><a href="#L138">138</a></th><td>                return lightColor;</td></tr><tr><th id="L139"><a href="#L139">139</a></th><td></td></tr><tr><th id="L140"><a href="#L140">140</a></th><td>        }else if(lights[i].position.w == zero_float || lights[i].type == 0){</td></tr><tr><th id="L141"><a href="#L141">141</a></th><td>                vec3 lightDirection = vec3(lights[i].position);</td></tr><tr><th id="L142"><a href="#L142">142</a></th><td>                lightColor = (gfDiffuseColor * gfLightDiffuse) * light_cos; </td></tr><tr><th id="L143"><a href="#L143">143</a></th><td>                if (half_cos &gt; zero_float){ </td></tr><tr><th id="L144"><a href="#L144">144</a></th><td>                        lightColor += (gfSpecularColor * gfLightSpecular) * pow(half_cos, gfShininess);</td></tr><tr><th id="L145"><a href="#L145">145</a></th><td>                }</td></tr><tr><th id="L146"><a href="#L146">146</a></th><td>                lightColor.a = gfDiffuseColor.a;</td></tr><tr><th id="L147"><a href="#L147">147</a></th><td>                return lightColor;</td></tr><tr><th id="L148"><a href="#L148">148</a></th><td>        }</td></tr><tr><th id="L149"><a href="#L149">149</a></th><td></td></tr><tr><th id="L150"><a href="#L150">150</a></th><td>        return vec4(zero_float);</td></tr><tr><th id="L151"><a href="#L151">151</a></th><td>}</td></tr><tr><th id="L152"><a href="#L152">152</a></th><td></td></tr><tr><th id="L153"><a href="#L153">153</a></th><td>void main() {</td></tr><tr><th id="L154"><a href="#L154">154</a></th><td>        //texturing vars</td></tr><tr><th id="L155"><a href="#L155">155</a></th><td>        vec2 texc;</td></tr><tr><th id="L156"><a href="#L156">156</a></th><td>        vec3 yuv, rgb;</td></tr><tr><th id="L157"><a href="#L157">157</a></th><td>        //endof</td></tr><tr><th id="L158"><a href="#L158">158</a></th><td></td></tr><tr><th id="L159"><a href="#L159">159</a></th><td>        //lighting</td></tr><tr><th id="L160"><a href="#L160">160</a></th><td>        int i;</td></tr><tr><th id="L161"><a href="#L161">161</a></th><td>        vec3 attemp;</td></tr><tr><th id="L162"><a href="#L162">162</a></th><td>        float distance = zero_float;</td></tr><tr><th id="L163"><a href="#L163">163</a></th><td>        vec4 lightColors[8];</td></tr><tr><th id="L164"><a href="#L164">164</a></th><td>        vec4 fragColor = vec4(0.0, 0.0, 0.0, 0.0);</td></tr><tr><th id="L165"><a href="#L165">165</a></th><td>        </td></tr><tr><th id="L166"><a href="#L166">166</a></th><td>        if(hasMeshColor){       //</td></tr><tr><th id="L167"><a href="#L167">167</a></th><td>                fragColor += m_color;</td></tr><tr><th id="L168"><a href="#L168">168</a></th><td>        }else if(gfNumLights==0){</td></tr><tr><th id="L169"><a href="#L169">169</a></th><td>                fragColor += gfEmissionColor;</td></tr><tr><th id="L170"><a href="#L170">170</a></th><td>                //fragColor += vec4(1.0, 1.0, 1.0, 1.0);//TODO</td></tr><tr><th id="L171"><a href="#L171">171</a></th><td>        }</td></tr><tr><th id="L172"><a href="#L172">172</a></th><td></td></tr><tr><th id="L173"><a href="#L173">173</a></th><td>        //clippin</td></tr><tr><th id="L174"><a href="#L174">174</a></th><td>        if(hasClip){</td></tr><tr><th id="L175"><a href="#L175">175</a></th><td>                for(int i=0;i&lt;CLIPS_MAX;i++){</td></tr><tr><th id="L176"><a href="#L176">176</a></th><td>                        if(clipDistance[i]&lt;0.0) discard;</td></tr><tr><th id="L177"><a href="#L177">177</a></th><td>                }</td></tr><tr><th id="L178"><a href="#L178">178</a></th><td>        }</td></tr><tr><th id="L179"><a href="#L179">179</a></th><td></td></tr><tr><th id="L180"><a href="#L180">180</a></th><td></td></tr><tr><th id="L181"><a href="#L181">181</a></th><td>        if (gfNumLights &gt; 0) {</td></tr><tr><th id="L182"><a href="#L182">182</a></th><td></td></tr><tr><th id="L183"><a href="#L183">183</a></th><td>                for(i=0; i&lt;8; i++){</td></tr><tr><th id="L184"><a href="#L184">184</a></th><td></td></tr><tr><th id="L185"><a href="#L185">185</a></th><td>                        if(i&gt;=gfNumLights) break;</td></tr><tr><th id="L186"><a href="#L186">186</a></th><td>                        </td></tr><tr><th id="L187"><a href="#L187">187</a></th><td>                        fragColor += doLighting(i);</td></tr><tr><th id="L188"><a href="#L188">188</a></th><td>                }</td></tr><tr><th id="L189"><a href="#L189">189</a></th><td>                fragColor.a = gfDiffuseColor.a;</td></tr><tr><th id="L190"><a href="#L190">190</a></th><td>        }</td></tr><tr><th id="L191"><a href="#L191">191</a></th><td></td></tr><tr><th id="L192"><a href="#L192">192</a></th><td>        fragColor = clamp(fragColor, zero_float, one_float);</td></tr><tr><th id="L193"><a href="#L193">193</a></th><td>        </td></tr><tr><th id="L194"><a href="#L194">194</a></th><td>        if(gfNumTextures&gt;0){    //currently supporting 1 texture</td></tr><tr><th id="L195"><a href="#L195">195</a></th><td>                if(isYUV==1){</td></tr><tr><th id="L196"><a href="#L196">196</a></th><td>                texc = TexCoord.st;</td></tr><tr><th id="L197"><a href="#L197">197</a></th><td>                texc.x *= width;</td></tr><tr><th id="L198"><a href="#L198">198</a></th><td>                texc.y *= height;</td></tr><tr><th id="L199"><a href="#L199">199</a></th><td>                yuv.x = texture2DRect(y_plane, texc).r;</td></tr><tr><th id="L200"><a href="#L200">200</a></th><td>                texc.x /= 2.0;</td></tr><tr><th id="L201"><a href="#L201">201</a></th><td>                texc.y /= 2.0;</td></tr><tr><th id="L202"><a href="#L202">202</a></th><td>                yuv.y = texture2DRect(u_plane, texc).r;</td></tr><tr><th id="L203"><a href="#L203">203</a></th><td>                yuv.z = texture2DRect(v_plane, texc).r;</td></tr><tr><th id="L204"><a href="#L204">204</a></th><td>                yuv += offset;</td></tr><tr><th id="L205"><a href="#L205">205</a></th><td>            rgb.r = dot(yuv, R_mul);</td></tr><tr><th id="L206"><a href="#L206">206</a></th><td>            rgb.g = dot(yuv, G_mul);</td></tr><tr><th id="L207"><a href="#L207">207</a></th><td>            rgb.b = dot(yuv, B_mul);</td></tr><tr><th id="L208"><a href="#L208">208</a></th><td>                fragColor = vec4(rgb, alpha);</td></tr><tr><th id="L209"><a href="#L209">209</a></th><td>                }else if(gfNumLights&gt;0){        //RGB texture</td></tr><tr><th id="L210"><a href="#L210">210</a></th><td>                        fragColor *= texture2DRect(y_plane, TexCoord);</td></tr><tr><th id="L211"><a href="#L211">211</a></th><td>                }else if(gfNumLights==0){       //RGB texture with material 2D</td></tr><tr><th id="L212"><a href="#L212">212</a></th><td>                        fragColor = texture2DRect(y_plane, TexCoord);</td></tr><tr><th id="L213"><a href="#L213">213</a></th><td>                }</td></tr><tr><th id="L214"><a href="#L214">214</a></th><td>        }</td></tr><tr><th id="L215"><a href="#L215">215</a></th><td>        </td></tr><tr><th id="L216"><a href="#L216">216</a></th><td>        if(gfFogEnabled)</td></tr><tr><th id="L217"><a href="#L217">217</a></th><td>                fragColor = fragColor * gfFogFactor + vec4(gfFogColor, zero_float) * (one_float - gfFogFactor);</td></tr><tr><th id="L218"><a href="#L218">218</a></th><td>        </td></tr><tr><th id="L219"><a href="#L219">219</a></th><td>        gl_FragColor = fragColor;</td></tr><tr><th id="L220"><a href="#L220">220</a></th><td>}</td></tr></tbody></table>

        </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/trac/project/gpac/raw-attachment/wiki/ES2shaders/ES2%5BYUVstrictFULL%5D.frag">Original format</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/trac/project/gpac/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">Powered by <a href="/trac/project/gpac/about"><strong>Trac 0.12.5</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.</p>
      <p class="right">© <a href="http://www.telecom-paristech.fr/">Télécom ParisTech</a></p>
    </div>
  </body>
</html>